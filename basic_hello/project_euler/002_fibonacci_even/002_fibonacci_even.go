/* 2_even_fibonacci
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 *
 * CONSTRAINTS: all val <= 4,000,000
 *              even-valued
 * RESULT: 4,613,732
 */

package main

import (
	"../mathtools/"
	"fmt"
)

func main() {
	// 准备:
	slice_fibonacci := GetFibonacciSlice(4000000) // inclusive
	sum_fibonacci_even := 0

	// 加工:
	slice_fibonacci_even := mathtools.GetEvenSlice(slice_fibonacci)
	sum_fibonacci_even = mathtools.Sum(slice_fibonacci_even)

	// 展示:
	fmt.Println(slice_fibonacci_even)
	fmt.Println(sum_fibonacci_even)
}

// input max_inclusive int number and return the slice of ints that is the Fibonacci list.
func GetFibonacciSlice(max_inclusive int) []int {
	nums := []int{}

	if max_inclusive == 1 {
		return []int{1}
	}
	if max_inclusive == 2 {
		return []int{1, 2}
	}

	nums = []int{1, 2}
	for {
		newnumber := nums[len(nums)-1] + nums[len(nums)-2]

		// 如果newnumber比max_inclusive大，传newnumber之前
		if newnumber > max_inclusive {
			return nums //return before newnumber
		}

		// 如果newnumber比max_inclusive小，继续append
		nums = append(nums, newnumber)
	}
}
