// 2_even_fibonacci.go file for learning purpose.

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

// Result: 4613732

package main

import (
	"fmt"
)

func main() {
	all_fibonacci := GetFibonacciSlice(3999999) // inclusive means less than equal to 3999999
	even_fibonacci_sum := 0

	for _, i := range all_fibonacci {
		if i%2 == 0 {
			even_fibonacci_sum += i
		}
	}
	fmt.Println(even_fibonacci_sum)
	fmt.Println(all_fibonacci)
}

// input max_inclusive int number and return the slice of ints that is the Fibonacci list.
func GetFibonacciSlice(max_inclusive int) []int {
	nums := []int{}

	if max_inclusive == 1 {
		return []int{1}
	}
	if max_inclusive == 2 {
		return []int{1, 2}
	}

	nums = []int{1, 2}
	for {
		newnumber := nums[len(nums)-1] + nums[len(nums)-2]

		// if newnumber is greather than the sum of previous2+ nums[len(nums)-2]
		if newnumber > max_inclusive {
			return nums //return before newnumber
		}

		// if newnumber is less than or equal to max, append to nums
		nums = append(nums, newnumber)
	}
}
